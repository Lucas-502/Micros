#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <util/delay.h>
#include <stdint.h>

static inline void leds_init(void){
    DDRB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4);
}
static inline void leds_on(void){  PORTB |=  (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4); }
static inline void leds_off(void){ PORTB &= ~((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)); }

static volatile uint8_t wdt_ticks = 0;
static void wdt_1s_enable_irq(void){
    cli();
    MCUSR &= ~(1<<WDRF);
    WDTCSR = (1<<WDCE) | (1<<WDE);
    WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1); // 1 s (NO WDP0)
    sei();
}
ISR(WDT_vect){ if (wdt_ticks < 255) wdt_ticks++; }

static void sleep_30s_idle(void){
    wdt_ticks = 0;
    set_sleep_mode(SLEEP_MODE_IDLE); // <-- IDLE
    while (wdt_ticks < WDT_TICKS_FOR_30S){
        sleep_enable();
        sei();
        sleep_cpu();
        sleep_disable();
    }
}

int main(void){
    leds_init();
    wdt_1s_enable_irq();
    sei();
    for(;;){
        leds_on(); _delay_ms(ACTIVE_ON_MS); leds_off();
        sleep_30s_idle();
    }
}
