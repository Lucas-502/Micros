#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#iclude<avr/io.h>
#iclude<stdint.h>

#define LDR_INVERT 0
#define ADC_SMOOTH_SHIFT 2

static void adc_init(void)
{
  ADMUX = (1<<REFS0);
  ADCSRA = (1<<ADEN)
    |(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0):
}

static uint16_t adc_read(uint8_t ch)
{
  ADMUX = (ADMUX & 0xF0) | (1<<DDB2):
  ADCSRA |= (1<<ADSC);
  while (ADCSRA & (1<<ADSC));
  return ADC:
}
static void pwm_init(void)
{
    DDRB  |= (1<<DDB1) | (1<<DDB2);       

    TCCR1A = (1<<COM1A1) | (1<<COM1B1)  
           | (1<<WGM11);                
    TCCR1B = (1<<WGM13) | (1<<WGM12)     
           | (1<<CS11) | (1<<CS10);      

    ICR1  = 255;                          
    OCR1A = 0;
    OCR1B = 0;
}

static inline uint8_t to8(uint16_t v10) { return (uint8_t)(v10 >> 2); }

int main(void)
{
    adc_init();
    pwm_init();

    uint16_t filt_pot = 0, filt_ldr = 0;  

    while (1)
    {
        uint16_t pot = adc_read(0);      
        uint16_t ldr = adc_read(1);       

#if ADC_SMOOTH_SHIFT > 0
        filt_pot += (pot - filt_pot) >> ADC_SMOOTH_SHIFT;
        filt_ldr += (ldr - filt_ldr) >> ADC_SMOOTH_SHIFT;
        pot = filt_pot;
        ldr = filt_ldr;
#endif
        uint8_t pot8 = to8(pot);
        uint8_t ldr8 = to8(ldr);

#if LDR_INVERT
        ldr8 = 255 - ldr8;
#endif
        OCR1A = pot8;

        OCR1B = ldr8;
    }
}
