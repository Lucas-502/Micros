; ===== ATmega328P - 7seg con LUT en SRAM + contador 0..9 + INICIO/PARO =====
; LUT en SRAM (ST Y+). Display 1 digito en PORTD. Catodo comun (activo en 1).

.include "m328pdef.inc"

; -------------------- MAPEOS DE SEGMENTOS (editar si tu cableado difiere) --
.equ BIT_A  = 0
.equ BIT_B  = 1
.equ BIT_C  = 2
.equ BIT_D  = 3
.equ BIT_E  = 4
.equ BIT_F  = 5
.equ BIT_G  = 6
.equ BIT_DP = 7

.equ SEG_A  = (1<<BIT_A)
.equ SEG_B  = (1<<BIT_B)
.equ SEG_C  = (1<<BIT_C)
.equ SEG_D  = (1<<BIT_D)
.equ SEG_E  = (1<<BIT_E)
.equ SEG_F  = (1<<BIT_F)
.equ SEG_G  = (1<<BIT_G)
.equ SEG_DP = (1<<BIT_DP)

; Digitos 0..9 para catodo comun
.equ DIG0 = SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F
.equ DIG1 = SEG_B|SEG_C
.equ DIG2 = SEG_A|SEG_B|SEG_D|SEG_E|SEG_G
.equ DIG3 = SEG_A|SEG_B|SEG_C|SEG_D|SEG_G
.equ DIG4 = SEG_B|SEG_C|SEG_F|SEG_G
.equ DIG5 = SEG_A|SEG_C|SEG_D|SEG_F|SEG_G
.equ DIG6 = SEG_A|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G
.equ DIG7 = SEG_A|SEG_B|SEG_C
.equ DIG8 = SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G
.equ DIG9 = SEG_A|SEG_B|SEG_C|SEG_D|SEG_F|SEG_G

; -------------------- TIEMPOS / BOTONES / BASE LUT -------------------------
.equ T1_PRE_1S      = 3036                 ; ~1 s @ 16MHz, presc 256
.equ BTN_INICIO_BIT = 0                    ; PB0
.equ BTN_PARO_BIT   = 1                    ; PB1
.equ MASC_BTN       = (1<<BTN_INICIO_BIT)|(1<<BTN_PARO_BIT)
.equ LUT_BASE_BAJA  = 0x00                 ; LOW(0x0100)
.equ LUT_BASE_ALTA  = 0x01                 ; HIGH(0x0100)

; -------------------- VARIABLES EN SRAM ------------------------------------
.dseg
.org 0x0110
estado:     .byte 1        ; 0=paro, 1=andando
contador:   .byte 1        ; 0..9
prev_pb:    .byte 1        ; muestreo anterior de PB1:0

; -------------------- CODIGO ------------------------------------------------
.cseg
.org 0x0000
rjmp RESET

.org 0x001A                 ; vector Timer1 OVF (m328p)
rjmp ISR_T1_OVF

RESET:
    ldi  r16, high(RAMEND)
    out  SPH, r16
    ldi  r16, low(RAMEND)
    out  SPL, r16
    clr  r1

    rcall CONFIGURAR
    rcall CARGAR_LUT

    ldi  r16, 0
    sts  estado, r16
    sts  contador, r16

    ; Timer1: /256 + precarga para ~1 s, OVF habilitada
    ldi  r16, 0
    sts  TCCR1A, r16
    ldi  r16, (1<<CS12)
    sts  TCCR1B, r16
    ldi  r16, high(T1_PRE_1S)
    sts  TCNT1H, r16
    ldi  r16, low(T1_PRE_1S)
    sts  TCNT1L, r16
    ldi  r16, (1<<TOIE1)
    sts  TIMSK1, r16
    sei

BUCLE_PRINCIPAL:
    rcall LEER_BOTONES
    rcall MOSTRAR_CONTADOR
    rjmp BUCLE_PRINCIPAL

; -------------------- CONFIGURACION ----------------------------------------
CONFIGURAR:
    ldi  r16, 0xFF
    out  DDRD, r16
    ldi  r16, 0x00
    out  PORTD, r16

    ldi  r16, 0x00
    out  DDRB, r16
    ldi  r16, MASC_BTN
    out  PORTB, r16

    in   r16, PINB
    andi r16, MASC_BTN
    sts  prev_pb, r16
    ret

; -------------------- CARGA DE LUT (0x0100) --------------------------------
CARGAR_LUT:
    ldi  r28, LUT_BASE_BAJA
    ldi  r29, LUT_BASE_ALTA

    ldi  r20, DIG0  ; 0
    st   Y+,  r20
    ldi  r20, DIG1  ; 1
    st   Y+,  r20
    ldi  r20, DIG2  ; 2
    st   Y+,  r20
    ldi  r20, DIG3  ; 3
    st   Y+,  r20
    ldi  r20, DIG4  ; 4
    st   Y+,  r20
    ldi  r20, DIG5  ; 5
    st   Y+,  r20
    ldi  r20, DIG6  ; 6
    st   Y+,  r20
    ldi  r20, DIG7  ; 7
    st   Y+,  r20
    ldi  r20, DIG8  ; 8
    st   Y+,  r20
    ldi  r20, DIG9  ; 9
    st   Y+,  r20
    ret

; -------------------- LECTURA DE BOTONES -----------------------------------
LEER_BOTONES:
    in   r16, PINB
    andi r16, MASC_BTN          ; now
    lds  r17, prev_pb
    mov  r18, r16               ; now
    com  r18                    ; ~now
    andi r18, MASC_BTN
    and  r18, r17               ; falls = prev & ~now
    sts  prev_pb, r16

    ; INICIO (PB0) en flanco descendente
    sbrs r18, BTN_INICIO_BIT
    rjmp _chk_paro
    ldi  r19, 1
    sts  estado, r19
_chk_paro:
    ; PARO (PB1) en flanco descendente
    sbrs r18, BTN_PARO_BIT
    rjmp _fin_btn
    ldi  r19, 0
    sts  estado, r19
_fin_btn:
    ret

; -------------------- SALIDA AL DISPLAY ------------------------------------
MOSTRAR_CONTADOR:
    lds  r0, contador
    ldi  r28, LUT_BASE_BAJA
    ldi  r29, LUT_BASE_ALTA
    add  r28, r0
    adc  r29, r1
    ld   r20, Y
    mov  r17, r20
;   com  r17           ; descomentar si es anodo comun
    out  PORTD, r17
    ret

; -------------------- ISR TIMER1 OVF ---------------------------------------
ISR_T1_OVF:
    in   r0, SREG
    push r0
    push r16
    push r17

    ldi  r16, high(T1_PRE_1S)
    sts  TCNT1H, r16
    ldi  r16, low(T1_PRE_1S)
    sts  TCNT1L, r16

    lds  r16, estado
    tst  r16
    breq _t1_fin

    lds  r16, contador
    inc  r16
    cpi  r16, 10
    brlo _guardar
    ldi  r16, 0
_guardar:
    sts  contador, r16

_t1_fin:
    pop  r17
    pop  r16
    pop  r0
    out  SREG, r0
    reti
