.include "m328pdef.inc"
; Constantes
.equ T1_PRE_1S     = 3036

.equ BTN_START_BIT = 0        ; PB0
.equ BTN_STOP_BIT  = 1        ; PB1
.equ BTN_MASK      = (1<<BTN_START_BIT)|(1<<BTN_STOP_BIT)

; Base de la LUT en SRAM (como pide el profe: cargado con ST Y+)
.equ LUT_BASE_L    = 0x00     ; LOW(0x0100)
.equ LUT_BASE_H    = 0x01     ; HIGH(0x0100)

;RAM - variables
.dseg
.org 0x0110                ; dejamos 0x0100.. para la LUT (0x0100..0x0109)
estado:     .byte 1        ; 0=parado, 1=andando
contador:   .byte 1        ; 0..9
prev_pb:    .byte 1        ; estado previo de PB1:0 (para flancos)

;Código
.cseg
.org 0x0000
rjmp RESET

; Vector Timer1 OVF
.org 0x001A
rjmp TIMER1_OVF_ISR 

RESET:
    ; Stack Pointer
    ldi  r16, high(RAMEND)
    out  SPH, r16
    ldi  r16, low(RAMEND)
    out  SPL, r16

    ; Convención: r1 = 0
    clr  r1

    rcall CONFIG
    rcall CARGAR_LUT

    ; Estado inicial
    ldi  r16, 0
    sts  estado, r16
    sts  contador, r16

    ; Timer1 prescaler 256, OVF cada 1s
    ldi  r16, 0
    sts  TCCR1A, r16
    ldi  r16, (1<<CS12)        
    sts  TCCR1B, r16
    ; Precarga 3036
    ldi  r16, high(T1_PRE_1S)
    sts  TCNT1H, r16
    ldi  r16, low(T1_PRE_1S)
    sts  TCNT1L, r16
    ; Habilitar interrupción OVF
    ldi  r16, (1<<TOIE1)
    sts  TIMSK1, r16

    sei
                    
