.include "m328pdef.inc"

.equ ACTIVE_LOW = 1
.equ BTN0_BIT = 0
.equ BTN1_BIT = 1
.equ BTN2_BIT = 3
.equ BTN_MASK = (1<<BTN0_BIT)|(1<<BTN1_BIT)|(1<<BTN2_BIT)

.dseg
modo:    .byte 1
bar:     .byte 1
ec_idx:  .byte 1
prev_pb: .byte 1

.cseg
.org 0x0000
    rjmp RESET

ec_tab:
    .db 0x81,0x42,0x24,0x18,0x24,0x42,0x81

RESET:
;  Stack 
    ldi  r16, high(RAMEND)
    out  SPH, r16
    ldi  r16, low(RAMEND)
    out  SPL, r16

; LEDs PORTD salida,en Active LOW 
    ldi  r16, 0xFF
    out  DDRD, r16
    ldi  r16, 0xFF
    out  PORTD, r16

;  Botones con pull-up
    cbi  DDRB, BTN0_BIT
    cbi  DDRB, BTN1_BIT
    cbi  DDRB, BTN2_BIT
    sbi  PORTB, BTN0_BIT
    sbi  PORTB, BTN1_BIT
    sbi  PORTB, BTN2_BIT
    in   r16, PINB
    andi r16, BTN_MASK
    sts  prev_pb, r16

 ; Estado inicial
    ldi  r16,0
    sts  modo,r16
    ldi  r16,0x01
    sts  bar,r16
    clr  r16
    sts  ec_idx,r16

; timersitoo
ldi  r16, high(49999)
    sts  OCR1AH, r16
    ldi  r16, low(49999)
    sts  OCR1AL, r16
    ldi  r16, 0
    sts  TCCR1A, r16
    ldi  r16, (1<<WGM12)|(1<<CS11)|(1<<CS10)
    sts  TCCR1B, r16
    ldi  r16, (1<<OCF1A)
    out  TIFR1, r16

MAIN:
WTICK:
    in   r16, TIFR1
    sbrs r16, OCF1A
    rjmp WTICK
    ldi  r16, (1<<OCF1A)
    out  TIFR1, r16

; leer botones flanco de 1 a 0
    in   r22, PINB
    andi r22, BTN_MASK
    lds  r23, prev_pb
    mov  r24, r22
    com  r24
    andi r24, BTN_MASK
    and  r24, r23
    sts  prev_pb, r22

    sbrc r24, BTN0_BIT
    rcall SET_DESP
    sbrc r24, BTN1_BIT
    rcall SET_SECU
    sbrc r24, BTN2_BIT
    rcall SET_EXT

; Un paso del modo actual 

    lds  r16, modo
    cpi  r16, 0
    breq STEP_DESP
    cpi  r16, 1
    breq STEP_SECU
    rjmp STEP_EXT

 ; Desplazamiento de izquierda a derecha un led encendido

STEP_DESP:
    lds  r18, bar
    rcall SHOW
    lds  r16, bar
    lsl  r16                   ; corre hacia la derecha
    brne D_KEEP
    ldi  r16, 0x01             ; vuelve al inicio
D_KEEP:
    sts  bar, r16
    rjmp MAIN

; Desplazamiento de izquierda a derecha con led continuo

STEP_SECU:
    lds  r18, bar
    rcall SHOW
    lds  r16, bar
    cpi  r16, 0xFF
    breq S_RST
    lsl  r16
    ori  r16, 0x01
    sts  bar, r16
    rjmp MAIN
S_RST:
    ldi  r16, 0x01
    sts  bar, r16
    rjmp MAIN

;Desplazamiento de extremos al centro y regreso

STEP_EXT:
    lds  r16, ec_idx
    ldi  ZH, high(ec_tab<<1)
    ldi  ZL, low(ec_tab<<1)
    clr  r25
    add  ZL, r16
    adc  ZH, r25
    lpm  r18, Z
    rcall SHOW
    lds  r16, ec_idx
    inc  r16
    cpi  r16, 7
    brlo E_KEEP
    ldi  r16, 0
E_KEEP:
    sts  ec_idx, r16
    rjmp MAIN

; ===== Setters =====
SET_DESP:
    ldi  r16, 0
    sts  modo, r16
    ldi  r16, 0x01
    sts  bar,  r16
    ret

SET_SECU:
    ldi  r16, 1
    sts  modo, r16
    ldi  r16, 0x01
    sts  bar,  r16
    ret

SET_EXT:
    ldi  r16, 2
    sts  modo, r16
    clr  r16
    sts  ec_idx, r16
    ret

; ===== Mostrar en PORTD (respeta Active LOW) =====
; r18 = patrón con SOLO los LEDs que deben encenderse.
SHOW:
    ldi  r19, ACTIVE_LOW
    tst  r19
    breq NO_INV
    com  r18       
NO_INV:
    out  PORTD, r18
    ret
