.include "m328pdef.inc"

.cseg
.org 0x0000
    rjmp RESET                      
.org 0x0034

.def temp         = r16
.def temp2        = r15
.def estado       = r17
.def contador_L   = r18
.def contador_H   = r19
.def contador_M   = r20
.def tipo_carga   = r21
.def usart_data   = r22

; Estados
.equ EN_ESPERA     = 1
.equ ALIMENTACION  = 2
.equ POSICIONADO   = 3
.equ PUNZONADO     = 4
.equ DESCARGA      = 5
.equ FIN_CICLO     = 6

; Cargas
.equ CARGA_LIGERA  = 1
.equ CARGA_MEDIA   = 2
.equ CARGA_PESADA  = 3

; Pines (Uno-F5)
.equ CINTA_PIN1     = PD6    ; D6
.equ CINTA_PIN2     = PB1    ; D9
.equ PUNZON_PIN1    = PD4    ; D4
.equ PUNZON_PIN2    = PB0    ; D8

; Botón de inicio en A1
.equ BOTON_INICIO   = PC1    ; A1 (PC1)

; LEDs de estado
.equ LED_ESPERA       = PB2  ; D10
.equ LED_FUNCIONANDO  = PB3  ; D11
.equ LED_FIN_CICLO    = PB4  ; D12

; UART a 200000 bps @16 MHz (modo normal, U2X=0)
.equ BAUD      = 9600
.equ UBRR_VAL = (16000000/(16*BAUD))-1   ; = 103

RESET:
    clr r1                            ; r1 = 0 (se usa en ADC/índices)

    ; Stack
    ldi temp, HIGH(RAMEND)
    out SPH, temp
    ldi temp, LOW(RAMEND)
    out SPL, temp

    rcall CONFIG_PUERTOS
    rcall USART_INIT

    ldi estado, EN_ESPERA
    ldi tipo_carga, CARGA_LIGERA
    rcall DETENER_TODO

    ; Mensaje inicial
    ldi ZH, HIGH(MSG_INICIO*2)
    ldi ZL, LOW(MSG_INICIO*2)
    rcall ENVIAR_STRING

MAIN_LOOP:
    rcall PROCESAR_USART

    mov  temp, estado
    subi temp, 1                         ; 1..6 -> 0..5
    ldi  ZH, HIGH(TABLA_ESTADOS)         ; SIN *2 (IJMP usa direcciones de palabra)
    ldi  ZL, LOW(TABLA_ESTADOS)
    add  ZL, temp
    adc  ZH, r1
    ijmp

TABLA_ESTADOS:
    rjmp ESTADO_EN_ESPERA
    rjmp ESTADO_ALIMENTACION
    rjmp ESTADO_POSICIONADO
    rjmp ESTADO_PUNZONADO
    rjmp ESTADO_DESCARGA
    rjmp ESTADO_FIN_CICLO

; ------------------ Estados ------------------
ESTADO_EN_ESPERA:
    rcall LED_ESPERA_ON

    ; Botón A1 (PC1) con pull-up: 0=presionado
    sbic PINC, BOTON_INICIO             ; si 0, salta la próxima
    rjmp MAIN_LOOP                      ; si NO está presionado, seguir esperando

    rcall DELAY_50MS                    ; debounce

ESPERAR_SOLTAR:
    sbis PINC, BOTON_INICIO             ; salta si 1 (soltado)
    rjmp ESPERAR_SOLTAR

    ldi estado, ALIMENTACION
    ldi ZH, HIGH(MSG_ALIM*2)
    ldi ZL, LOW(MSG_ALIM*2)
    rcall ENVIAR_STRING
    rjmp MAIN_LOOP

ESTADO_ALIMENTACION:
    rcall LED_FUNCIONANDO_ON
    rcall DETENER_PUNZON
    rcall AVANZAR_CINTA

    rcall GET_TIEMPO_AVANCE             ; según tipo_carga
    rcall DELAY_PARAMETRICO

    rcall DETENER_CINTA
    rcall DELAY_50MS

    ldi estado, POSICIONADO
    ldi ZH, HIGH(MSG_POS*2)
    ldi ZL, LOW(MSG_POS*2)
    rcall ENVIAR_STRING
    rjmp MAIN_LOOP

ESTADO_POSICIONADO:
    rcall DETENER_TODO

    rcall GET_TIEMPO_PAUSA
    rcall DELAY_PARAMETRICO

    ldi estado, PUNZONADO
    ldi ZH, HIGH(MSG_PUNZ*2)
    ldi ZL, LOW(MSG_PUNZ*2)
    rcall ENVIAR_STRING
    rjmp MAIN_LOOP

ESTADO_PUNZONADO:
    rcall DETENER_CINTA

    rcall BAJAR_PUNZON
    ldi temp, 20                        ; 1 s (20×50 ms)
    rcall DELAY_PARAMETRICO

    rcall DETENER_PUNZON
    rcall GET_TIEMPO_PRESION
    rcall DELAY_PARAMETRICO

    rcall SUBIR_PUNZON
    ldi temp, 20
    rcall DELAY_PARAMETRICO

    rcall DETENER_PUNZON
    rcall DELAY_50MS

    ldi estado, DESCARGA
    ldi ZH, HIGH(MSG_DESC*2)
    ldi ZL, LOW(MSG_DESC*2)
    rcall ENVIAR_STRING
    rjmp MAIN_LOOP
ESTADO_DESCARGA:
    rcall DETENER_PUNZON
    rcall RETROCEDER_CINTA              ; reversa: PB1=1, PD6=0
    ldi temp, 60                        ; 3 s
    rcall DELAY_PARAMETRICO
    rcall DETENER_CINTA

    ldi estado, FIN_CICLO
    ldi ZH, HIGH(MSG_FIN*2)
    ldi ZL, LOW(MSG_FIN*2)
    rcall ENVIAR_STRING
    rjmp MAIN_LOOP

ESTADO_FIN_CICLO:
    rcall LED_FIN_CICLO_ON
    ldi temp, 40                        ; 2 s
    rcall DELAY_PARAMETRICO

    ldi estado, EN_ESPERA
    ldi ZH, HIGH(MSG_ESPERA*2)
    ldi ZL, LOW(MSG_ESPERA*2)
    rcall ENVIAR_STRING
    rjmp MAIN_LOOP

; ------------------ Configuración y UART ------------------
CONFIG_PUERTOS:
    ; PORTD: PD6, PD4 salidas
    in  temp, DDRD
    sbr temp, (1<<PD6)|(1<<PD4)
    out DDRD, temp
    ; PORTB: PB0, PB1, PB2-4 salidas
    in  temp, DDRB
    sbr temp, (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)
    out DDRB, temp
    ; PORTC: PC1 entrada con pull-up (botón A1)
    in  temp, DDRC
    cbr temp, (1<<PC1)
    out DDRC, temp
    in  temp, PORTC
    sbr temp, (1<<PC1)
    out PORTC, temp
    ; Apagar salidas al inicio
    clr temp
    out PORTB, temp
    in  temp, PORTD
    cbr temp, (1<<PD6)|(1<<PD4)
    out PORTD, temp
    ret

USART_INIT:
    ldi temp, 0
    sts UCSR0A, temp            ; U2X=0
    ldi temp, HIGH(UBRR_VAL)
    sts UBRR0H, temp
    ldi temp, LOW(UBRR_VAL)
    sts UBRR0L, temp
    ldi temp, (1<<RXEN0)|(1<<TXEN0)
    sts UCSR0B, temp
    ldi temp, (1<<UCSZ01)|(1<<UCSZ00)    ; 8N1
    sts UCSR0C, temp
	ret

USART_TRANSMIT:
    lds temp2, UCSR0A
    sbrs temp2, UDRE0
    rjmp USART_TRANSMIT
    sts UDR0, usart_data
    ret

ENVIAR_STRING:
ENVIAR_CHAR:
    lpm usart_data, Z+
    tst usart_data
    breq FIN_STRING
    rcall USART_TRANSMIT
    rjmp ENVIAR_CHAR
FIN_STRING:
    ret

PROCESAR_USART:
    lds temp, UCSR0A
    sbrs temp, RXC0
    ret
    lds usart_data, UDR0

    cpi usart_data, 'A'    ; iniciar por serie si está en ESPERA
    breq CMD_INICIO
    cpi usart_data, '1'
    breq CMD_CARGA1
    cpi usart_data, '2'
    breq CMD_CARGA2
    cpi usart_data, '3'
    breq CMD_CARGA3
    ret

CMD_INICIO:
    cpi estado, EN_ESPERA
    brne FIN_CMD
    ldi estado, ALIMENTACION
    ldi ZH, HIGH(MSG_ALIM*2)
    ldi ZL, LOW(MSG_ALIM*2)
    rcall ENVIAR_STRING
FIN_CMD:
    ret

CMD_CARGA1:
    ldi tipo_carga, 1
    rjmp ENVIAR_CARGA_MSG
CMD_CARGA2:
    ldi tipo_carga, 2
    rjmp ENVIAR_CARGA_MSG
CMD_CARGA3:
    ldi tipo_carga, 3
    rjmp ENVIAR_CARGA_MSG

ENVIAR_CARGA_MSG:
    ldi ZH, HIGH(MSG_CARGA*2)
    ldi ZL, LOW(MSG_CARGA*2)
    rcall ENVIAR_STRING
    mov  usart_data, tipo_carga
    ldi  temp, '0'
    add  usart_data, temp
    rcall USART_TRANSMIT
    ldi  usart_data, 13
    rcall USART_TRANSMIT
    ldi  usart_data, 10
    rcall USART_TRANSMIT
    ret

; ------------------ Timing ------------------
GET_TIEMPO_AVANCE:
    ldi ZH, HIGH(TABLA_AVANCE*2)
    ldi ZL, LOW(TABLA_AVANCE*2)
    rjmp GET_TIEMPO_TABLA
GET_TIEMPO_PAUSA:
    ldi ZH, HIGH(TABLA_PAUSA*2)
    ldi ZL, LOW(TABLA_PAUSA*2)
    rjmp GET_TIEMPO_TABLA
GET_TIEMPO_PRESION:
    ldi ZH, HIGH(TABLA_PRESION*2)
    ldi ZL, LOW(TABLA_PRESION*2)
    rjmp GET_TIEMPO_TABLA

GET_TIEMPO_TABLA:
    mov temp2, tipo_carga
    dec temp2
    add ZL, temp2
    adc ZH, r1
    lpm temp, Z
    ret

; temp = N (N×50 ms)
DELAY_PARAMETRICO:
    tst temp
    breq FIN_DELAY_PARAM
DL_LOOP:
    rcall DELAY_50MS
    dec  temp
    brne DL_LOOP
FIN_DELAY_PARAM:
    ret

; ~50 ms @16 MHz (ajustable: cambiar contador_M 3..5)
DELAY_50MS:
    ldi contador_M, 4
D50_1:
    ldi contador_H, 255
D50_2:
    ldi contador_L, 255
D50_3:
    dec contador_L
    brne D50_3
    dec contador_H
    brne D50_2
    dec contador_M
    brne D50_1
    ret
; ------------------ Motores y LEDs ------------------
AVANZAR_CINTA:
    rcall DETENER_PUNZON
    in  temp, PORTD
    sbr temp, (1<<CINTA_PIN1)       ; PD6=1
    out PORTD, temp
    in  temp, PORTB
    cbr temp, (1<<CINTA_PIN2)       ; PB1=0
    out PORTB, temp
    ret

RETROCEDER_CINTA:
    in  temp, PORTD
    cbr temp, (1<<CINTA_PIN1)       ; PD6=0
    out PORTD, temp
    in  temp, PORTB
    sbr temp, (1<<CINTA_PIN2)       ; PB1=1
    out PORTB, temp
    ret

DETENER_CINTA:
    in  temp, PORTD
    cbr temp, (1<<CINTA_PIN1)
    out PORTD, temp
    in  temp, PORTB
    cbr temp, (1<<CINTA_PIN2)
    out PORTB, temp
    ret

BAJAR_PUNZON:
    rcall DETENER_CINTA
    in  temp, PORTD
    sbr temp, (1<<PUNZON_PIN1)      ; PD4=1
    out PORTD, temp
    in  temp, PORTB
    cbr temp, (1<<PUNZON_PIN2)      ; PB0=0
    out PORTB, temp
    ret

SUBIR_PUNZON:
    rcall DETENER_CINTA
    in  temp, PORTD
    cbr temp, (1<<PUNZON_PIN1)      ; PD4=0
    out PORTD, temp
    in  temp, PORTB
    sbr temp, (1<<PUNZON_PIN2)      ; PB0=1
    out PORTB, temp
    ret

DETENER_PUNZON:
    in  temp, PORTD
    cbr temp, (1<<PUNZON_PIN1)
    out PORTD, temp
    in  temp, PORTB
    cbr temp, (1<<PUNZON_PIN2)
    out PORTB, temp
    ret

DETENER_TODO:
    rcall DETENER_CINTA
    rcall DETENER_PUNZON
    ret

LED_ESPERA_ON:
    in  temp, PORTB
    sbr temp, (1<<LED_ESPERA)
    cbr temp, (1<<LED_FUNCIONANDO)|(1<<LED_FIN_CICLO)
    out PORTB, temp
    ret
LED_FUNCIONANDO_ON:
    in  temp, PORTB
    sbr temp, (1<<LED_FUNCIONANDO)
    cbr temp, (1<<LED_ESPERA)|(1<<LED_FIN_CICLO)
    out PORTB, temp
    ret
LED_FIN_CICLO_ON:
    in  temp, PORTB
    sbr temp, (1<<LED_FIN_CICLO)
    cbr temp, (1<<LED_ESPERA)|(1<<LED_FUNCIONANDO)
    out PORTB, temp
    ret

; ------------------ Datos en FLASH (pares para evitar warnings) ------------------
; Tiempos en unidades de 50 ms (agrego filler 0)
TABLA_AVANCE:   .db 60, 80, 100, 0
TABLA_PAUSA:    .db 40, 40, 60, 0
TABLA_PRESION:  .db 40, 60, 80, 0

MSG_INICIO: .db "INICIO", 13, 10, 0, 0
MSG_ESPERA: .db "ESPERA", 13, 10, 0, 0
MSG_ALIM:   .db "ALIM",   13, 10, 0, 0
MSG_POS:    .db "POS",    13, 10, 0
MSG_PUNZ:   .db "PUNZ",   13, 10, 0, 0
MSG_DESC:   .db "DESC",   13, 10, 0, 0
MSG_FIN:    .db "FIN",    13, 10, 0
MSG_CARGA:  .db "CARGA:", 0, 0
