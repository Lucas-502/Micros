// che voy creando el codigo del control de temperatura, es  para probarlo en picsimlab, le falta el menu y demas cosas, pero lo van haciendo de a poco

#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>

// USART
void USART_init(uint16_t ubrr) {
    UBRR0H = (unsigned char)(ubrr>>8);
    UBRR0L = (unsigned char)ubrr;
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);             // habilitar Rx y Tx
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);           // 8 bits de datos
}
void USART_transmit(char data) {
    while (!(UCSR0A & (1<<UDRE0)));
    UDR0 = data;
}
void USART_print(char* str) {
    while(*str) USART_transmit(*str++);
}
char USART_receive() {
    while (!(UCSR0A & (1<<RXC0)));
    return UDR0;
}

// ADC para las seÃ±ales analogicas
void ADC_init() {
    ADMUX = (1<<REFS0); // AVcc ref
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // prescaler 128
}
uint16_t read_ADC(uint8_t ch) {
    ADMUX = (ADMUX & 0xF0) | (ch & 0x0F);
    ADCSRA |= (1<<ADSC);
    while (ADCSRA & (1<<ADSC));
    return ADC;
}

// PWM en OC0A  pin PD6 Arduino
void PWM_init() {
    DDRD |= (1<<PD6); // OC0A como salida
    TCCR0A = (1<<COM0A1)|(1<<WGM01)|(1<<WGM00); // Fast PWM, no invertido
    TCCR0B = (1<<CS01)|(1<<CS00); // prescaler 64
    OCR0A = 0;
}

// el coso del calor va en PB0 pin digital 8
void heater_on() { PORTB |= (1<<PB0); }
void heater_off() { PORTB &= ~(1<<PB0); }
