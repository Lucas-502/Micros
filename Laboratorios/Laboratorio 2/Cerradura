#define PCF8574	0x27

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>//       
#include <xc.h>
 
#include <util/twi.h>
#include "twi_lcd.h"
#include "twi.h"
#include <stdbool.h>   // <<< necesario para bool/true/false

//Puertos

const uint8_t F4      = (1 << PD2);//Fila4
const uint8_t F3      = (1 << PD3);
const uint8_t F2      = (1 << PD4);
const uint8_t F1      = (1 << PD5);//Fila1
const uint8_t C1      = (1 << PD6);//columna1
const uint8_t C2      = (1 << PD7);
const uint8_t C3      = (1 << PB0);
const uint8_t C4      = (1 << PB1);//Columna4

const uint8_t Buzzer  = (1 << PB2);
const uint8_t Red     = (1 << PB3);    //Led rojo
const uint8_t Green   = (1 << PB4);    //Led verde

// Conmutador de PIN por olvido
#define NOMEACUERDOQUEPUSE 0
 
// Funciones de EEPROM de 328P
static void eew(uint16_t a, uint8_t d){
    while (EECR & (1<<EEPE));
    EEAR=a; EEDR=d; EECR |= (1<<EEMPE); EECR |= (1<<EEPE);
}

static uint8_t eer(uint16_t a){
    while (EECR & (1<<EEPE));
    EEAR=a; EECR |= (1<<EERE); return EEDR;
}

/ Mapa de teclado y buffers de ingreso
// Teclas simbólicas
#define T_OK   'A'  // Aceptar  
#define T_BOR  'B'  // Borrar   
#define T_CAN  'C'  // Cancelar 
#define T_CER  'R'  // Cerrar   
#define T_MEN  'M'  // Menu (a la derecha del cero)
 
// Parámetros de longitud y reintentos
#define LMIN 4
#define LMAX 6
#define MAXI 3
 
// Disposición de teclas (col x fila)
static const char teclas[4][4] = {
     { '1','4','7','*' },           // C1
     { '2','5','8','0' },           // C2
     { '3','6','9',T_MEN },         // C3
     { T_OK, T_BOR, T_CAN, T_CER }  // C4
};
 
static const uint8_t b[4] = { C1, C2, C3, C4 };
static const uint8_t f[4] = { F1, F2, F3, F4 };
 
// Buffers de ingreso
static char ing[LMAX];
static uint8_t n_ing=0;
static uint8_t ver=0;                
static volatile uint8_t want_cerrar=0;
static volatile uint8_t want_menu=0;

typedef enum { E_BIENV=0, E_VERIF, E_MENU, E_CAMB1, E_CAMB2, E_CIERRE } EST;
 
static void pant_bienvenido(void){
    twi_lcd_clear();
    twi_lcd_cmd(0x80); twi_lcd_msg("Bienvenido");
}
static void pant_opciones(void){
    twi_lcd_cmd(0xC0); twi_lcd_msg("A:Entrar M:Menu");
}
static void pant_pedir(const char *titulo){
    twi_lcd_clear();
    twi_lcd_cmd(0x80); twi_lcd_msg(titulo); /* <=16 */
}
static void pant_ok(void){
    twi_lcd_clear();
    twi_lcd_cmd(0x80); twi_lcd_msg("Acceso concedido");
}
static void pant_err(void){
    twi_lcd_clear();
    twi_lcd_cmd(0x80); twi_lcd_msg("Clave invalida");
}
static void pant_int(uint8_t n){
    twi_lcd_cmd(0xC0); twi_lcd_msg("Intento ");
    twi_lcd_dwr('0'+n); twi_lcd_msg("/3");
}
static void pant_alerta(void){
    twi_lcd_clear();
    twi_lcd_cmd(0x80); twi_lcd_msg("ALERTA! 3 fallos");
}
static void pant_cierre(void){
    twi_lcd_clear();
    twi_lcd_cmd(0x80); twi_lcd_msg("Cerrando...");
}

// === Autor A – Ronda 2: Scanner de teclado ===
static char Teclado(void){
    PORTD |= (C1|C2);
    PORTB |= (C3|C4);
 
    for(uint8_t i=0;i<4;i++){
        if(i<2){ PORTD |= (C1|C2); PORTD &= ~b[i]; }
        else    { PORTB |= (C3|C4); PORTB &= ~b[i]; }
        _delay_us(5);
        for(uint8_t j=0;j<4;j++){                               
            if( !(PIND & f[j]) ){
                char t = teclas[i][j];
                _delay_ms(20); // antirrebote sencillo
                if(t != '*'){
                    while( !(PIND & f[j]) ) { _delay_ms(1); }
                }
                if(i<2) PORTD |= b[i]; else PORTB |= b[i];
                return t;
            }
        }
        if(i<2) PORTD |= b[i]; else PORTB |= b[i];
    }
    return 0;
}
